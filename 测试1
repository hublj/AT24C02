#include <Wire.h>

// 全局声明每页8字节（24C02每页8字节）
#define EEPROM_PAGE_SIZE 8
#define EEPROM_TOTAL_SIZE 256 // 24C02芯片容量2K位换算成字节得到，即256字节

// 24C02 EEPROM相关定义
#define EEPROM_ADDRESS 0x50

// 假设这些是全局变量
int startHourForGroup1, startMinuteForGroup1, endHourForGroup1, endMinuteForGroup1;
bool isTimedGroup1;
int startHourForGroup2, startMinuteForGroup2, endHourForGroup2, endMinuteForGroup2;
bool isTimedGroup2;

// 向EEPROM写入数据的函数，添加写入重试机制和更详细的错误处理
void writeEEPROM(int address, const char* data, int length) {
    if (address >= EEPROM_TOTAL_SIZE || (address + length) > EEPROM_TOTAL_SIZE) {
        Serial.println("写入地址超出EEPROM范围");
        return;
    }
    int maxRetries = 3;  // 最大重试次数
    int offset = 0;
    while (length > 0) {
        int bytesToWrite = min(length, EEPROM_PAGE_SIZE - (address % EEPROM_PAGE_SIZE));
        for (int retry = 0; retry < maxRetries; retry++) {
            Wire.beginTransmission(EEPROM_ADDRESS);
            Wire.write(address);
            for (int i = 0; i < bytesToWrite; i++) {
                Wire.write(data[offset + i]);
            }
            if (Wire.endTransmission() == 0) {
                break;
            }
            Serial.print("EEPROM写入数据出现错误，地址: ");
            Serial.println(address);
            Serial.print("正在重试...重试次数: ");
            Serial.println(retry + 1);
            delay(100);  // 重试间隔
        }
        offset += bytesToWrite;
        length -= bytesToWrite;
        address += bytesToWrite;
    }
}

// 从EEPROM读取数据的函数，添加读取结果判断和错误提示
void readEEPROM(int address, char* buffer, int length) {
    if (address >= EEPROM_TOTAL_SIZE || (address + length) > EEPROM_TOTAL_SIZE) {
        Serial.println("读取地址超出EEPROM范围");
        return;
    }
    Wire.beginTransmission(EEPROM_ADDRESS);
    Wire.write(address);
    Wire.endTransmission(false);
    Wire.requestFrom(EEPROM_ADDRESS, length);
    int receivedBytes = 0;
    while (Wire.available() && receivedBytes < length) {
        buffer[receivedBytes++] = Wire.read();
    }
    if (receivedBytes!= length) {
        Serial.print("从EEPROM读取数据出现错误，期望读取 ");
        Serial.print(length);
        Serial.print(" 字节，实际读取 ");
        Serial.print(receivedBytes);
        Serial.print(" 字节，地址: ");
        Serial.println(address);
    }
    buffer[receivedBytes] = '\0';  // 确保字符串结束
}

// 从EEPROM读取定时设置数据的函数，添加数据合法性检查和读取前后延迟
void readTimingSettingsFromEEPROM() {
    delay(20);  // 读取前增加延迟
    char data[13];  // 增加一个字符用于存储字符串结束符

    // 读取定时1的设置
    readEEPROM(0, data, 12);
    if (strlen(data) == 12) {
        bool isValid = true;
        for (int i = 0; i < 8; i++) {
            if (data[i] < '0' || data[i] > '9') {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            sscanf(data, "%02d%02d%02d%02d%c", &startHourForGroup1, &startMinuteForGroup1, &endHourForGroup1, &endMinuteForGroup1, &isTimedGroup1);
            isTimedGroup1 = isTimedGroup1 == '1';
        } else {
            Serial.println("定时1读取到的数据存在非法字符");
        }
    }

    // 读取定时2的设置
    readEEPROM(12, data, 12);
    if (strlen(data) == 12) {
        bool isValid = true;
        for (int i = 0; i < 8; i++) {
            if (data[i] < '0' || data[i] > '9') {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            sscanf(data, "%02d%02d%02d%02d%c", &startHourForGroup2, &startMinuteForGroup2, &endHourForGroup2, &endMinuteForGroup2, &isTimedGroup2);
            isTimedGroup2 = isTimedGroup2 == '1';
        } else {
            Serial.println("定时2读取到的数据存在非法字符");
        }
    }

    delay(20);  // 读取后增加延迟
}

// 将定时设置数据写入EEPROM的函数，添加地址范围检查
void writeTimingSettingsToEEPROM() {
    if (12 + 12 > EEPROM_TOTAL_SIZE) {
        Serial.println("定时设置数据写入地址超出合理范围");
        return;
    }

    // 构建定时1的数据字符串，确保格式化为固定长度（这里假设总长度12字节，格式如：00000000000，前8位分别为时分时分，最后一位为是否定时标志）
    char data1[13];  // 增加一个字符用于存储字符串结束符
    snprintf(data1, sizeof(data1), "%02d%02d%02d%02d%c", startHourForGroup1, startMinuteForGroup1, endHourForGroup1, endMinuteForGroup1, isTimedGroup1? '1' : '0');
    // 写入定时1的数据到EEPROM
    writeEEPROM(0, data1, 12);

    // 构建定时2的数据字符串
    char data2[13];  // 增加一个字符用于存储字符串结束符
    snprintf(data2, sizeof(data2), "%02d%02d%02d%02d%c", startHourForGroup2, startMinuteForGroup2, endHourForGroup2, endMinuteForGroup2, isTimedGroup2? '1' : '0');
    // 写入定时2的数据到EEPROM
    writeEEPROM(12, data2, 12);
}

void setup() {
    Serial.begin(9600);
    Wire.begin();
    // 初始化一些定时设置数据
    startHourForGroup1 = 8;
    startMinuteForGroup1 = 0;
    endHourForGroup1 = 18;
    endMinuteForGroup1 = 0;
    isTimedGroup1 = true;

    startHourForGroup2 = 20;
    startMinuteForGroup2 = 0;
    endHourForGroup2 = 22;
    endMinuteForGroup2 = 0;
    isTimedGroup2 = true;

    // 将定时设置数据写入EEPROM
    writeTimingSettingsToEEPROM();

    // 从EEPROM读取定时设置数据
    readTimingSettingsFromEEPROM();

    // 打印读取到的数据
    Serial.print("定时1：开始时间 ");
    Serial.print(startHourForGroup1);
    Serial.print(":");
    Serial.print(startMinuteForGroup1);
    Serial.print(" 结束时间 ");
    Serial.print(endHourForGroup1);
    Serial.print(":");
    Serial.print(endMinuteForGroup1);
    Serial.print(" 是否定时 ");
    Serial.println(isTimedGroup1? "是" : "否");

    Serial.print("定时2：开始时间 ");
    Serial.print(startHourForGroup2);
    Serial.print(":");
    Serial.print(startMinuteForGroup2);
    Serial.print(" 结束时间 ");
    Serial.print(endHourForGroup2);
    Serial.print(":");
    Serial.print(endMinuteForGroup2);
    Serial.print(" 是否定时 ");
    Serial.println(isTimedGroup2? "是" : "否");
}

void loop() {
    // 主循环可以添加其他功能
    delay(1000);
}
