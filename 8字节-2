#include <Wire.h>

// 24C02 EEPROM相关定义
#define EEPROM_ADDRESS 0x50
#define EEPROM_PAGE_SIZE 8
#define EEPROM_TOTAL_SIZE 256

// 向EEPROM写入数据的函数，添加写入重试机制和更详细的错误处理
void writeEEPROM(int address, const char* data, int length) {
    int maxRetries = 3; // 最大重试次数
    for (int retry = 0; retry < maxRetries; retry++) {
        Wire.beginTransmission(EEPROM_ADDRESS);
        Wire.write((int)(address >> 8));
        Wire.write((int)(address & 0xFF));

        int bytesToWrite = length;
        if ((address % EEPROM_PAGE_SIZE) + length > EEPROM_PAGE_SIZE) {
            bytesToWrite = EEPROM_PAGE_SIZE - (address % EEPROM_PAGE_SIZE);
        }

        for (int i = 0; i < bytesToWrite; i++) {
            Wire.write(data[i]);
        }

        if (Wire.endTransmission() == 0) {
            return; // 写入成功，直接返回
        }

        Serial.print("EEPROM写入数据出现错误，地址: ");
        Serial.println(address);
        Serial.print("正在重试...重试次数: ");
        Serial.println(retry + 1);
        delay(100); // 重试间隔
    }
    Serial.print("多次重试后，EEPROM写入数据仍然失败，地址: ");
    Serial.println(address);
}

// 从EEPROM读取数据的函数，添加读取结果判断和错误提示
String readEEPROM(int address, int length) {
    if (address + length > EEPROM_TOTAL_SIZE) {
        Serial.println("读取地址超出EEPROM总容量范围");
        return "";
    }

    String data = "";
    Wire.beginTransmission(EEPROM_ADDRESS);
    Wire.write((int)(address >> 8));
    Wire.write((int)(address & 0xFF));
    Wire.endTransmission(false);
    Wire.requestFrom(EEPROM_ADDRESS, length);

    int receivedBytes = 0;
    while (Wire.available()) {
        char c = Wire.read();
        data += c;
        receivedBytes++;
    }

    if (receivedBytes!= length) {
        Serial.print("从EEPROM读取数据出现错误，期望读取 ");
        Serial.print(length);
        Serial.print(" 字节，实际读取 ");
        Serial.print(receivedBytes);
        Serial.print(" 字节，地址: ");
        Serial.println(address);
    }

    return data;
}

// 将定时设置数据写入EEPROM的函数，添加地址范围检查
void writeTimingSettingsToEEPROM(int startHourForGroup1, int startMinuteForGroup1, int endHourForGroup1, int endMinuteForGroup1,
                                 bool isTimedGroup1, int startHourForGroup2, int startMinuteForGroup2, int endHourForGroup2,
                                 int endMinuteForGroup2, bool isTimedGroup2) {
    if (0 + 8 > EEPROM_TOTAL_SIZE || 8 + 8 > EEPROM_TOTAL_SIZE) {
        Serial.println("定时设置数据写入地址超出合理范围");
        return;
    }

    // 构建定时1的数据字符串，确保格式化为固定长度（这里假设总长度8字节，格式如：0000000，前6位分别为时分时分，最后一位为是否定时标志）
    char data1[8];
    sprintf(data1, "%02d%02d%02d%02d%c", startHourForGroup1, startMinuteForGroup1, endHourForGroup1, endMinuteForGroup1, isTimedGroup1? '1' : '0');
    writeEEPROM(0, data1, 8);

    // 构建定时2的数据字符串
    char data2[8];
    sprintf(data2, "%02d%02d%02d%02d%c", startHourForGroup2, startMinuteForGroup2, endHourForGroup2, endMinuteForGroup2, isTimedGroup2? '1' : '0');
    writeEEPROM(8, data2, 8);
}

// 从EEPROM读取定时设置数据的函数，添加数据合法性检查和读取前后延迟
void readTimingSettingsFromEEPROM() {
    delay(20); // 读取前增加延迟

    // 读取定时1的设置
    String data = readEEPROM(0, 8);
    if (data.length() == 8) {
        bool isValid = true;
        for (int i = 0; i < 6; i++) {
            if (data[i] < '0' || data[i] > '9') {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            startHourForGroup1 = data.substring(0, 2).toInt();
            startMinuteForGroup1 = data.substring(2, 4).toInt();
            endHourForGroup1 = data.substring(4, 6).toInt();
            endMinuteForGroup1 = data.substring(6, 8).toInt();
            isTimedGroup1 = data.substring(6, 7) == "1";
        } else {
            Serial.println("定时1读取到的数据存在非法字符");
        }
    }

    // 读取定时2的设置
    data = readEEPROM(8, 8);
    if (data.length() == 8) {
        bool isValid = true;
        for (int i = 0; i < 6; i++) {
            if (data[i] < '0' || data[i] > '9') {
                isValid = false;
                break;
            }
        }
        if (isValid) {
            startHourForGroup2 = data.substring(0, 2).toInt();
            startMinuteForGroup2 = data.substring(2, 4).toInt();
            endHourForGroup2 = data.substring(4, 6).toInt();
            endMinuteForGroup2 = data.substring(6, 8).toInt();
            isTimedGroup2 = data.substring(6, 7) == "1";
        } else {
            Serial.println("定时2读取到的数据存在非法字符");
        }
    }

    delay(20); // 读取后增加延迟
}

void setup() {
    Serial.begin(9600);
    Wire.begin();

    // 从EEPROM读取定时设置数据
    readTimingSettingsFromEEPROM();
}

void loop() {
    // 示例：修改定时设置后写入EEPROM
    int newStartHourForGroup1 = 10;
    int newStartMinuteForGroup1 = 30;
    int newEndHourForGroup1 = 12;
    int newEndMinuteForGroup1 = 0;
    bool newIsTimedGroup1 = true;

    int newStartHourForGroup2 = 14;
    int newStartMinuteForGroup2 = 45;
    int newEndHourForGroup2 = 16;
    int newEndMinuteForGroup2 = 0;
    bool newIsTimedGroup2 = true;

    writeTimingSettingsToEEPROM(newStartHourForGroup1, newStartMinuteForGroup1, newEndHourForGroup1, newEndMinuteForGroup1, newIsTimedGroup1,
                                newStartHourForGroup2, newStartMinuteForGroup2, newEndHourForGroup2, newEndMinuteForGroup2, newIsTimedGroup2);

    delay(2000);
}
